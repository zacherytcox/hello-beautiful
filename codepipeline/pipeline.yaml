AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  RepoID:
    Type: String
  GitCommit:
    Type: String
  GitBranch:
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
          BlockPublicAcls: True
          BlockPublicPolicy: True
          IgnorePublicAcls: True
          RestrictPublicBuckets: True
      Tags: 
        - Key: GitCommit
          Value: !Ref GitCommit
        - Key: GitBranch
          Value: !Ref GitBranch
        - Key: RepoID
          Value: !Ref RepoID
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore: 
        Location: !Ref Bucket
        Type: S3
      RoleArn: !GetAtt IAMRolePipeline.Arn
      RestartExecutionOnUpdate: True
      Stages: 
        - Name: Source
          Actions: 
            - Name: Source
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: 1
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                FullRepositoryId: !Ref RepoID
                BranchName: !Ref GitBranch
              Namespace: SourceVariables
              OutputArtifacts: 
                - Name: SourceOutput
        - Name: Pre-Deploy-Checks
          Actions: 
            - Name: GitSecrets-WIP
              ActionTypeId: 
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts: 
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildGitSecrets
            - Name: CFN-Nag
              ActionTypeId: 
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts: 
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildCFNNag
        - Name: Deploy-Stage
          Actions: 
            - Name: Deploy-Stage
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration: 
                ActionMode: "CREATE_UPDATE"
                StackName: !Sub ${AWS::StackName}-App-Stage
                RoleArn: !GetAtt IAMRoleCloudFormation.Arn
                ParameterOverrides: !Sub '{"GitCommit": "#{SourceVariables.CommitId}","GitBranch": "#{SourceVariables.BranchName}","RepoID": "#{SourceVariables.FullRepositoryName}"}'
                TemplatePath: SourceOutput::app/app.yaml
              InputArtifacts: 
                - Name: SourceOutput
        - Name: Data-Test-Stage
          Actions: 
            - Name: Test-Stage
              ActionTypeId: 
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts: 
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildStage
        - Name: Deploy-Prod
          Actions: 
            - Name: Deploy-Prod
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration: 
                ActionMode: "CREATE_UPDATE"
                StackName: !Sub ${AWS::StackName}-App-Prod
                RoleArn: !GetAtt IAMRoleCloudFormation.Arn
                ParameterOverrides: !Sub '{"GitCommit": "#{SourceVariables.CommitId}","GitBranch": "#{SourceVariables.BranchName}","RepoID": "#{SourceVariables.FullRepositoryName}"}'
                TemplatePath: SourceOutput::app/app.yaml
              InputArtifacts: 
                - Name: SourceOutput
        - Name: Data-Test-Prod
          Actions: 
            - Name: Test-Prod
              ActionTypeId: 
                Category: Test
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts: 
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref CodeBuildProd
        # - Name: Approval-Delete
        #   Actions: 
        #     - Name: Approval-Delete
        #       ActionTypeId: 
        #         Category: Approval
        #         Owner: AWS
        #         Provider: Manual
        #         Version: 1
        # - Name: Delete-Prod
        #   Actions: 
        #     - Name: Delete-Prod
        #       ActionTypeId: 
        #         Category: Test
        #         Owner: AWS
        #         Provider: CodeBuild
        #         Version: 1
        #       InputArtifacts: 
        #         - Name: SourceOutput
        #       Configuration:
        #         ProjectName: !Ref CodeBuildDeleteProd
  CodeStarConnection:
    Type: AWS::CodeStarConnections::Connection
    Properties: 
      ConnectionName: hello-beautiful
      ProviderType: GitHub
  IAMRolePipeline:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: 
              - codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Description: String
      Policies: 
        - PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: AWSCloudTrailCreateLogStream20141101
              Effect: Allow
              Action:
              - '*'
              Resource:
              - '*'
          PolicyName: Policy
  IAMRoleCloudFormation:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
          Action: sts:AssumeRole
      Description: String
      Policies: 
        - PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: AWSCloudTrailCreateLogStream20141101
              Effect: Allow
              Action:
              - '*'
              Resource:
              - '*'
          PolicyName: Policy
        # - PolicyDocument: 
        #     Version: '2012-10-17'
        #     Statement:
        #     - Effect: Allow
        #       Action:
        #       - s3:CreateBucket
        #       - s3:GetBucketPolicy
        #       - s3:PutBucketPolicy
        #       - s3:PutBucketTagging
        #       - s3:PutBucketWebsite
        #       Resource: arn:aws:s3:::*
        #   PolicyName: Policy
  IAMRoleCodeBuild:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: 
              - codebuild.amazonaws.com
          Action: sts:AssumeRole
      Description: String
      Policies: 
        - PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Sid: AWSCloudTrailCreateLogStream20141101
              Effect: Allow
              Action:
              - '*'
              Resource:
              - '*'
          PolicyName: Policy
        # - PolicyDocument:
        #     Version: '2012-10-17'
        #     Statement:
        #     - Effect: Allow
        #       Action:
        #       - logs:CreateLogGroup
        #       - logs:CreateLogStream
        #       Resource: "*"
        #   PolicyName: Policy
          
  # CodeBuild:
  #   Type: AWS::CodeBuild::Project
  #   Properties: 
  #     Artifacts: 
  #       Type: CODEPIPELINE
  #     Environment: 
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
  #       Type: LINUX_CONTAINER
  #     ServiceRole: !GetAtt IAMRole.Arn
  #     Source: 
  #       BuildSpec: !Sub |
  #         version: 0.2
  #         phases:
  #           build:
  #             commands:
  #               - echo Build started on `date`
  #               - echo $Commit_ID
  #               - ( set -o posix ; set ) | less
  #               - ls -alh
  #               - pwd
  #               - whoami
  #             finally:
  #               - echo This always runs even if the install command fails
  #       SourceIdentifier: pleaseworkforZach
  #       Type: CODEPIPELINE
  CodeBuildGitSecrets:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              stack_name: "${AWS::StackName}-App-Stage"
          phases:
            install:
              commands:
                - ( set -o posix ; set )
                - echo Install started on `date`
                - git clone https://github.com/awslabs/git-secrets.git
                - ls -alh
                - ls -alh git-secrets
                - cd git-secrets
                - pwd
                - make install
                - git secrets --install
                - cd ..
                - git clone https://github.com/${RepoID}.git
                - cd hello-beautiful
                - git secrets --install
                - git secrets
            build:
              commands:
                - echo Testing started on `date`
                - git secrets --scan ./tmp.txt
                - git secrets --scan-history
                - git secrets --scan -r 
        SourceIdentifier: pleaseworkforZach
        Type: CODEPIPELINE
  CodeBuildStage:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              stack_name: "${AWS::StackName}-App-Stage"
          phases:
            install:
              commands:
                - ( set -o posix ; set )
                - echo Install started on `date`
                - sh ./codepipeline/scripts/run_scripts.sh $stack_name "data*"
            post_build:
              commands:
                - echo Testing started on `date`
                - sh ./codepipeline/scripts/run_scripts.sh  $stack_name "test*"
                - sh ./codepipeline/scripts/run_scripts.sh  $stack_name "delete*"
        SourceIdentifier: pleaseworkforZach
        Type: CODEPIPELINE
  CodeBuildProd:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              stack_name: "${AWS::StackName}-App-Prod"
          phases:
            install:
              commands:
                - ( set -o posix ; set )
                - ls -alh
                - echo Install started on `date`
                - sh ./codepipeline/scripts/run_scripts.sh  $stack_name "data*"
            post_build:
              commands:
                - echo Testing started on `date`
                - sh ./codepipeline/scripts/run_scripts.sh  $stack_name "test*"
        SourceIdentifier: pleaseworkforZach
        Type: CODEPIPELINE
  # CodeBuildDeleteProd:
  #   Type: AWS::CodeBuild::Project
  #   Properties: 
  #     Artifacts: 
  #       Type: CODEPIPELINE
  #     Environment: 
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
  #       Type: LINUX_CONTAINER
  #     ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
  #     Source: 
  #       BuildSpec: !Sub |
  #         version: 0.2
  #         env:
  #           variables:
  #             stack_name: "${AWS::StackName}-App-Prod"
  #         phases:
  #           post_build:
  #             commands:
  #               - echo Testing started on `date`
  #               - sh ./codepipeline/scripts/run_scripts.sh  $stack_name "delete*"
  #       SourceIdentifier: pleaseworkforZach
  #       Type: CODEPIPELINE
  CodeBuildCFNNag:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt IAMRoleCodeBuild.Arn
      Source: 
        BuildSpec: !Sub |
          version: 0.2
          env:
            variables:
              stack_name: "${AWS::StackName}-App-Stage"
          phases:
            install:
              commands:
                - ( set -o posix ; set )
                - echo Install started on `date`
                - gem install cfn-nag
            post_build:
              commands:
                - echo Testing started on `date`
                - cfn_nag_scan --input-path .
        SourceIdentifier: pleaseworkforZach
        Type: CODEPIPELINE







        